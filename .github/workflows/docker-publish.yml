name: Build and Push Docker Images

on:
  workflow_dispatch:
  push:
    paths:
      - "src/BE/**"
      - "src/UI/**"
  pull_request:
    paths:
      - "src/BE/**"
      - "src/UI/**"

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'src/BE/**'
            frontend:
              - 'src/UI/**'

  build-backend:
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set repo owner
        run: echo "REPO_OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV
      - uses: docker/build-push-action@v5
        with:
          context: ./src/BE
          file: ./src/BE/Dockerfile
          push: true
          tags: ghcr.io/${{ env.REPO_OWNER_LC }}/my-portfolio-backend:latest

  build-frontend:
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set repo owner
        run: echo "REPO_OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV
      - uses: docker/build-push-action@v5
        with:
          context: ./src/UI
          file: ./src/UI/Dockerfile
          push: true
          tags: ghcr.io/${{ env.REPO_OWNER_LC }}/my-portfolio-frontend:latest

  deploy:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (
          needs.build-backend.result == 'success' || needs.build-backend.result == 'skipped' ||
          needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped'
        )
    steps:
      - name: Print build results
        run: |
          echo "Backend result: ${{ needs.build-backend.result }}"
          echo "Frontend result: ${{ needs.build-frontend.result }}"
      - uses: actions/checkout@v4
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Copy docker-compose files and scripts
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.prod.yml nginx.conf renew-certs.sh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/home/${{ secrets.VPS_USER }}/my-portfolio/
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'chmod +x /home/${{ secrets.VPS_USER }}/my-portfolio/renew-certs.sh'
      - name: Deploy on VPS with Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} '
            cd /home/${{ secrets.VPS_USER }}/my-portfolio && \
            docker-compose -f docker-compose.prod.yml pull && \
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans
          '
